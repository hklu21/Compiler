fib1:        
        pop {r0}
        mov r0,r0
        mov r9,#2
        mov r10,#0
        cmp r0,r9
        movlt r10,#1
        mov r11,#1
        cmp r10,r11
        bne elseLabel_L1
ifLabel_L0:
        mov r0,r0
        push {r0}
        ret r0
        b done_L2
elseLabel_L1:
        mov r0,r0
        mov r12,#1
        sub r13,r0,r12
        push {r13}
        bl fib1
        pop {r14}
        mov r15,r14
        mov r0,r0
        mov r16,#2
        sub r17,r0,r16
        push {r17}
        bl fib1
        pop {r18}
        mov r19,r18
        add r20,r15,r19
        push {r20}
        ret r20
done_L2:
fib2:
        pop {r1}
        mov r21,#0
        mov r2,r21
        mov r22,#1
        mov r3,r22
        b testCond_L4
loopBody_L3:
        mov r1,r1
        mov r23,#1
        sub r24,r1,r23
        mov r1,r24
        mov r2,r2
        mov r3,r3
        add r25,r2,r3
        mov r4,r25
        mov r3,r3
        mov r2,r3
        mov r4,r4
        mov r3,r4
testCond_L4:
        mov r1,r1
        mov r26,#0
        mov r27,#0
        cmp r1,r26
        movne r27,#1
        mov r28,#1
        cmp r27,r28
        beq loopBody_L3
        mov r2,r2
        push {r2}
        ret r2
main:
        new r29,nums
        mov r5,r29
        read r8
        mov r8,r8
        loadRef r8,r5,@a
        read r8
        mov r8,r8
        loadRef r8,r5,@b
        mov r5,r5
        loadRef r32,r5,@a
        push {r32}
        bl fib1
        pop {r34}
        mov r35,r34
        mov r6,r35
        mov r5,r5
        loadRef r36,r5,@b
        push {r36}
        bl fib2
        pop {r38}
        mov r39,r38
        mov r7,r39
        delete r5
        println r6
        println r7
