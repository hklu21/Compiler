package main; 

import "fmt"; 

type Node struct { 

    value int; 
    left  *Node;
    right *Node;  
}; 

var  root *Node; 

//func delete(value interface{}){ }

func compare(cur int, neuw int) int {

    if (cur < neuw) {
		return 1;
	} else {  
		if (cur > neuw) {
		   return -1;
		} else {
		   return 0;
		}
	}
}
func addNode (numAdd int, curr *Node) { 
	var compVal int;
    var newNode *Node;

	if( curr == nil ){
		newNode = new(Node);
		newNode.value = numAdd;
		root = newNode;
	} else {
		compVal = compare (curr.value, numAdd);
		
		if( compVal == -1) {
			if(curr.left == nil) {
				newNode = new(Node);
				newNode.value = numAdd;
				curr.left = newNode;
			} else {
				addNode ( numAdd, curr.left);
			}
		} else {
			if(compVal == 1) {
				if(curr.right == nil) {
					newNode = new(Node);
					newNode.value = numAdd;
					curr.right = newNode;
				} else {
					addNode ( numAdd, curr.right);
				}
			}
		}
	}
}
func printDepthTree (curr *Node)  {
	var val int;
	val = curr.value;
	if( curr != nil ) {
		if( curr.left != nil) {
			printDepthTree(curr.left);
		}

		fmt.Println(val);

		if(curr.right !=nil) {
			printDepthTree(curr.right);
		}
	}
}
func deleteLeavesTree (curr *Node) {
	if( curr != nil ) {
		if( curr.left != nil) {
			deleteLeavesTree(curr.left);
		}

		if(curr.right !=nil) {
			deleteLeavesTree(curr.right);
		}
		delete(curr);
	}
}

func main() {
	var input int;
	var val int;
	val = 10;

	root = nil;
	input = 0;

	fmt.Scan(&input);

	for (input!=0) {
		addNode (input, root) ;
	    fmt.Scan(&input);
	}
	
	printDepthTree (root);	
	deleteLeavesTree (root);
    fmt.Println(val);
}
